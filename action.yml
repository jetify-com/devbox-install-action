name: 'devbox installer'
description: 'Install Devbox in your CICD workflow'
branding:
  icon: 'box'
  color: 'purple'

inputs:
  project-path:  # path to folder
    description: 'Project path to devbox.json. Default to the root directory of the repository.'
    default: '.'
  enable-cache:  # 'true' or 'false'
    description: 'Caching the entire Nix store in github based on your devbox.json'
    default: 'false'
  refresh-cli: # 'true' or 'false'
    description: 'Specify whether the CLI should be redownloaded'
    default: 'false'
  devbox-version: # version of the devbox cli
    description: 'Specify devbox CLI version you want to pin to. Default to latest'
    default: ''
  sha256-checksum: # the expected SHA256 checksum of the devbox binary.
    description: 'Specify an explicit checksum for the devbox binary. For extra security on top of the existing checks in the devbox launch script'
  disable-nix-access-token: # 'true' or 'false'
    description: 'Disable configuration of nix access-tokens with the GitHub token used in the workflow'
    default: 'false'

runs:
  using: "composite"
  steps:
    - name: Workaround for permission issue
      if: inputs.enable-cache == 'true' && runner.os != 'macOS'
      shell: bash
      run: sudo chmod u+s "$(command -v tar)"

    - name: Mount nix store cache
      if: inputs.enable-cache == 'true'
      uses: actions/cache@v3
      with:
        path: |
          ~/.nix-defexpr
          ~/.nix-profile
          /nix/store
          /nix/var/nix
          ~/.local/state/nix
        key: ${{ runner.os }}-devbox-${{ hashFiles(format('{0}/devbox.json', inputs.project-path)) }}

    - name: Get devbox version
      shell: bash
      env:
        DEVBOX_USE_VERSION: ${{ inputs.devbox-version }}
      run: |
        if [[ -n $DEVBOX_USE_VERSION ]]; then
          echo "latest_version=$DEVBOX_USE_VERSION" >> $GITHUB_ENV
        else
          tmp_file=$(mktemp)
          latest_url="https://releases.jetpack.io/devbox/stable/version"
          curl --fail --silent --location --output "${tmp_file}" "${latest_url}"
          latest_version=$(cat "${tmp_file}")
          if [[ -n ${latest_version} ]]; then
            echo "Found devbox latest version ${latest_version}."
            echo "latest_version=$latest_version" >> $GITHUB_ENV
          else
            echo "ERROR: unable to find the latest devbox version."
            exit 1
          fi
        fi

    - name: Mount devbox cli cache
      if: inputs.refresh-cli == 'false'
      id: cache-devbox-cli
      uses: actions/cache@v3
      with:
        path: /usr/local/bin/devbox
        key: ${{ runner.os }}-devbox-${{ env.latest_version }}

    - name: Install devbox cli
      if: steps.cache-devbox-cli.outputs.cache-hit != 'true'
      shell: bash
      env:
        DEVBOX_SHA256: ${{ inputs.sha256-checksum }}
      run: |
        export DEVBOX_USE_VERSION="${{ env.latest_version }}"
        curl -fsSL https://get.jetpack.io/devbox | FORCE=1 bash

        version=$(devbox version)
        if [[ ! "$version" = "$DEVBOX_USE_VERSION" ]]; then
          echo "ERROR: mismatch devbox version downloaded. Expected $DEVBOX_USE_VERSION, got $version."
          exit 1
        fi
        DEVBOX_BINARY="$(find "${HOME}/.cache/devbox/bin" -name devbox)"
        if [ -n "$DEVBOX_SHA256" ]; then
          if command -v "sha256sum" 1>/dev/null 2>&1; then
            # Linux distributions will likely have this.
            DEVBOX_CHECKSUM="$(sha256sum "$DEVBOX_BINARY" | cut -f1 -d' ')"
          elif command -v "shasum" 1>/dev/null 2>&1; then
            # MacOS comes with this.
            DEVBOX_CHECKSUM="$(shasum -a 256 "$DEVBOX_BINARY" | cut -f1 -d' ')"
          fi

          if [ -z "$DEVBOX_CHECKSUM" ]; then
            echo "ERROR: unable to get devbox checksum. Please ensure sha256sum or shasum is installed."
            exit 2
          fi

          if [[ ! "$DEVBOX_CHECKSUM" = "$DEVBOX_SHA256" ]]; then
            echo "ERROR: checksums do not match. Expected $DEVBOX_SHA256, got $DEVBOX_CHECKSUM."
            exit 3
          fi
        fi
        sudo mv "$DEVBOX_BINARY" /usr/local/bin/devbox

    - name: Configure nix access-tokens
      if: inputs.disable-nix-access-token == 'false'
      shell: bash
      run: |
        mkdir -p ~/.config/nix
        echo "access-tokens = github.com=${{ github.token }}" >> ~/.config/nix/nix.conf

    - name: Install nix and devbox packages
      shell: bash
      run: |
        NIX_INSTALLER_NO_CHANNEL_ADD=1
        NIX_BUILD_SHELL=/bin/bash
        devbox run --config=${{ inputs.project-path }} -- echo "Packages installed!"
